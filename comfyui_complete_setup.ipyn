{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMeUhrJFiUP9uNeyp9giExY",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/chi-saku/comfyui-google-colab-starter/blob/main/comfyui_complete_setup.ipyn\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "POJa3OOr2Qmv"
      },
      "outputs": [],
      "source": [
        "#@title 🎨 佐伯講師のComfyUI環境構築（ワンクリック版）\n",
        "#@markdown 📖 ComfyUIの環境を自動構築し、A1111のモデルと完全連携します\n",
        "\n",
        "print(\"🚀 佐伯講師のComfyUI環境構築を開始します...\")\n",
        "print(\"💡 A1111で使用中のモデルがそのまま使えるComfyUI環境を構築中...\")\n",
        "\n",
        "#@title 1. Google Drive マウント\n",
        "from google.colab import drive\n",
        "import os, pathlib, shutil, subprocess, re, threading, time\n",
        "\n",
        "print(\"\\n📁 Google Drive をマウント中...\")\n",
        "try:\n",
        "    drive.mount('/content/drive')\n",
        "    print(\"✅ Google Drive接続完了\")\n",
        "except Exception as e:\n",
        "    print(f\"❌ Google Driveマウント失敗: {e}\")\n",
        "    print(\"💡 権限ダイアログで「Google Driveに接続」を許可してください\")\n",
        "    raise\n",
        "\n",
        "#@title 2. ComfyUI本体とManagerのセットアップ\n",
        "%%bash\n",
        "set -e  # エラー時に停止\n",
        "\n",
        "APPDIR=\"/content/ComfyUI\"\n",
        "MGRDIR=\"$APPDIR/custom_nodes/ComfyUI-Manager\"\n",
        "\n",
        "echo \"🔧 ComfyUI本体をセットアップ中...\"\n",
        "if [ ! -d \"$APPDIR\" ]; then\n",
        "  echo \"  📦 ComfyUI本体を新規ダウンロード中...\"\n",
        "  git clone --quiet https://github.com/comfyanonymous/ComfyUI.git \"$APPDIR\"\n",
        "  echo \"  ✅ ComfyUI本体ダウンロード完了\"\n",
        "else\n",
        "  echo \"  🔄 既存のComfyUI本体を更新中...\"\n",
        "  git -C \"$APPDIR\" pull --quiet\n",
        "  echo \"  ✅ ComfyUI本体更新完了\"\n",
        "fi\n",
        "\n",
        "echo \"🔌 ComfyUI-Managerをセットアップ中...\"\n",
        "if [ ! -d \"$MGRDIR\" ]; then\n",
        "  echo \"  📦 ComfyUI-Managerを新規ダウンロード中...\"\n",
        "  git clone --quiet https://github.com/ltdrdata/ComfyUI-Manager.git \"$MGRDIR\"\n",
        "  echo \"  ✅ ComfyUI-Manager ダウンロード完了\"\n",
        "else\n",
        "  echo \"  🔄 既存のComfyUI-Managerを更新中...\"\n",
        "  git -C \"$MGRDIR\" pull --quiet\n",
        "  echo \"  ✅ ComfyUI-Manager 更新完了\"\n",
        "fi\n",
        "\n",
        "#@title 3. 必要なライブラリのインストール\n",
        "%%bash\n",
        "set -e\n",
        "\n",
        "echo \"📚 必要なライブラリをインストール中...\"\n",
        "echo \"  🔥 PyTorchをインストール中...\"\n",
        "pip -q install torch==2.0.1+cu118 torchvision==0.15.2+cu118 \\\n",
        "               torchaudio==2.0.2+cu118 \\\n",
        "               --extra-index-url https://download.pytorch.org/whl/cu118\n",
        "\n",
        "echo \"  ⚡ 高速化ライブラリをインストール中...\"\n",
        "pip -q install xformers==0.0.20 triton==2.0.0 packaging\n",
        "\n",
        "echo \"  🌐 ネットワーク関連をインストール中...\"\n",
        "pip -q install cloudflared\n",
        "\n",
        "echo \"  📋 ComfyUI要件をインストール中...\"\n",
        "pip -q install -r \"/content/ComfyUI/requirements.txt\"\n",
        "\n",
        "echo \"  🔧 ComfyUI-Manager要件をインストール中...\"\n",
        "if [ -f \"/content/ComfyUI/custom_nodes/ComfyUI-Manager/requirements.txt\" ]; then\n",
        "  pip -q install -r \"/content/ComfyUI/custom_nodes/ComfyUI-Manager/requirements.txt\"\n",
        "fi\n",
        "\n",
        "echo \"✅ 全ライブラリのインストール完了\"\n",
        "\n",
        "#@title 4. A1111モデルとの連携設定\n",
        "print(\"\\n🔗 A1111のモデルをComfyUIで使用できるよう連携中...\")\n",
        "\n",
        "# Google Driveとモデルフォルダの連携\n",
        "drive_root = pathlib.Path('/content/drive/MyDrive/AI/models')\n",
        "repo_root = pathlib.Path('/content/ComfyUI/models')\n",
        "\n",
        "link_map = {\n",
        "    repo_root / 'checkpoints': drive_root / 'Stable-diffusion',\n",
        "    repo_root / 'vae': drive_root / 'VAE',\n",
        "    repo_root / 'loras': drive_root / 'Lora',\n",
        "    repo_root / 'controlnet': drive_root / 'ControlNet',\n",
        "    repo_root / 'embeddings': drive_root / 'embeddings',\n",
        "    repo_root / 'upscale_models': drive_root / 'upscale_models',\n",
        "}\n",
        "\n",
        "for link_path, real_path in link_map.items():\n",
        "    real_path.mkdir(parents=True, exist_ok=True)\n",
        "\n",
        "    # 既存フォルダがあれば削除してシンボリックリンクに置き換え\n",
        "    if link_path.exists() and not link_path.is_symlink():\n",
        "        print(f\"  🧹 既存の '{link_path.name}' を掃除中...\")\n",
        "        shutil.rmtree(link_path, ignore_errors=True)\n",
        "\n",
        "    if not link_path.exists():\n",
        "        os.symlink(real_path, link_path, target_is_directory=True)\n",
        "        print(f\"  ✅ '{link_path.name}' の連携完了\")\n",
        "    else:\n",
        "        print(f\"  ✅ '{link_path.name}' は既に連携済み\")\n",
        "\n",
        "print('🎉 A1111 ↔ ComfyUI モデルリンク完了！')\n",
        "\n",
        "#@title 5. 環境情報の表示（トラブルシューティング用）\n",
        "print(\"\\n📋 環境情報（問題があれば講師に送信してください）:\")\n",
        "import sys, torch\n",
        "\n",
        "print(f\"Python: {sys.version.split()[0]}\")\n",
        "print(f\"PyTorch: {torch.__version__}\")\n",
        "print(f\"CUDA Available: {torch.cuda.is_available()}\")\n",
        "if torch.cuda.is_available():\n",
        "    print(f\"GPU: {torch.cuda.get_device_name(0)}\")\n",
        "    print(f\"VRAM: {torch.cuda.get_device_properties(0).total_memory / 1024**3:.1f} GB\")\n",
        "\n",
        "# モデル確認\n",
        "checkpoints_dir = pathlib.Path('/content/ComfyUI/models/checkpoints')\n",
        "if checkpoints_dir.exists():\n",
        "    models = list(checkpoints_dir.glob('*.safetensors')) + list(checkpoints_dir.glob('*.ckpt'))\n",
        "    print(f\"利用可能なモデル数: {len(models)}\")\n",
        "    if models:\n",
        "        print(\"  最初の3つ:\")\n",
        "        for model in models[:3]:\n",
        "            print(f\"    - {model.name}\")\n",
        "else:\n",
        "    print(\"⚠️  モデルフォルダが見つかりません\")\n",
        "\n",
        "#@title 6. ComfyUI起動！\n",
        "print(\"\\n🚀 ComfyUIを起動します...\")\n",
        "print(\"📋 起動完了後、表示されるURLをクリックしてComfyUIにアクセスしてください\")\n",
        "print(\"💡 A1111のモデルがそのまま使えます！\")\n",
        "print(\"🎯 Manager機能で追加のカスタムノードもインストール可能です\")\n",
        "\n",
        "# ComfyUIサーバー起動\n",
        "print(\"🔧 ComfyUIサーバーを起動中...\")\n",
        "ui = subprocess.Popen(\n",
        "    ['python', '/content/ComfyUI/main.py', '--listen', '0.0.0.0', '--port', '8188'],\n",
        "    stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True\n",
        ")\n",
        "\n",
        "def tunnel(port=8188):\n",
        "    # サーバー起動を待つ\n",
        "    time.sleep(5)\n",
        "    print(\"🌐 外部アクセス用トンネルを作成中...\")\n",
        "    proc = subprocess.Popen(\n",
        "        ['cloudflared', 'tunnel', '--url', f'http://127.0.0.1:{port}', '--no-autoupdate'],\n",
        "        stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True\n",
        "    )\n",
        "    for line in proc.stdout:\n",
        "        if 'trycloudflare.com' in line:\n",
        "            m = re.search(r'https://[^\\s]*trycloudflare.com', line)\n",
        "            if m:\n",
        "                print('\\n🎉 ComfyUI へはこちら →', m.group(0))\n",
        "                print('💡 このURLをクリックしてComfyUIを開いてください')\n",
        "                print('📚 使い方が分からない場合は講師にお聞きください')\n",
        "                break\n",
        "\n",
        "threading.Thread(target=tunnel, daemon=True).start()\n",
        "\n",
        "# ComfyUIの起動状況を表示\n",
        "def show_comfyui_output():\n",
        "    for line in ui.stdout:\n",
        "        if any(keyword in line for keyword in ['Starting server', 'Total VRAM', 'Loading', 'Model loaded']):\n",
        "            print(f\"ComfyUI: {line.strip()}\")\n",
        "        if 'To see the GUI go to' in line:\n",
        "            print(\"✅ ComfyUIサーバー起動完了\")\n",
        "\n",
        "threading.Thread(target=show_comfyui_output, daemon=True).start()\n",
        "\n",
        "print(\"⏳ 起動処理中... URLが表示されるまでしばらくお待ちください\")\n"
      ]
    }
  ]
}